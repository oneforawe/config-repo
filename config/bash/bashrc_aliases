#!/usr/bin/env bash
# filename: bashrc_aliases   (linked from ~/.bashrc_aliases)
# purpose: For defining custom commands (functions and aliases) in the shell.

# This file is sourced from ~/.bashrc (which is for interactive shells).


# Aliases
# ----------------------------------------------------------------------

# directory changing
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# directory records (stack)
alias d='dirs -v | head -10'

# grep color
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias zgrep='zgrep --color=auto'
alias zegrep='zegrep --color=auto'
alias zfgrep='zfgrep --color=auto'

# git
alias gs='git status'                             # show all the usual stuff
alias gss='git status --untracked-files=no'       # don't show untracked files
alias ga='git add'
alias gcm='git commit -m'
#alias gpsuo='git push --set-upstream origin'
alias gbl='git branch --list'                     # same as `git branch`
alias gblr='git branch -r'
alias gbla='git branch -a'
alias gbld='git-branch-list-with-descriptions'    # see code below
alias gbc='git-branch-create' # see code below (create/checkout+link-origin/up)
alias gbds='git-branch-description-show'          # see code below
alias gbde='git branch --edit-description'        # git branch description edit
unalias gbd # git branch -d (--delete) -- dangerous command; write it out

#alias dff='df -hT | grep -vE "(tmpfs|Use%)"'
#alias svi='vi -u NONE +"set syntax=" +"set nowrap"'
#alias pu="pip3 list --outdated --format=columns"


# Functions and Aliases
# ----------------------------------------------------------------------

# diff
function difff {
    diff -u $1 $2 | diff-so-fancy
}

# will probably want to edit this after finishing work on bash prompts
function whereami () {
    red=$'\e[1;31m'
    grn=$'\e[1;32m'
    yel=$'\e[1;33m'
    blu=$'\e[1;34m'
    mag=$'\e[1;35m'
    cyn=$'\e[1;36m'
    end=$'\e[0m'
    if   [[ `uname -n` = "soliton.local" ]] ; then
        if [[ -n $ZSH_VERSION ]] ; then
            print -P "%F{$USER_HOST_COLOR}soliton (MacOS)%f"
        elif [[ -n $BASH_VERSION ]] ; then
            printf "%s\n" "${blu}soliton (MacOS)${end}"
        fi
    elif [[ `uname -n` = "momentus" ]] ; then
        if [[ -n $ZSH_VERSION ]] ; then
            print -P "%F{$USER_HOST_COLOR}momentus (GNU/Linux)"
        elif [[ -n $BASH_VERSION ]] ; then
            printf "%s\n" "${mag}momentus (GNU/Linux)${end}"
        fi
    else
        if [[ -n $ZSH_VERSION ]] ; then
            print -P "%F{$USER_HOST_COLOR}`uname -n`%f"
        elif [[ -n $BASH_VERSION ]] ; then
            printf "%s\n" "${yel}`uname -n`${end}"
        fi
        echo "..not in the usual soliton or momentus.."
    fi
}

# bash only (?)
function level () {
    echo " What kind/level of shell are you in? "
    echo "--------------------------------------"
    if [[ " $- " = *l* ]] ; then
        echo "echo \$- = $(echo $-)"
        echo "l ==> You're in a login shell."
        echo "      (rather than a sub shell)"
        echo "\n LOGIN shell"
    else
        echo "echo \$- = $(echo $-)"
        echo "no l ==> You're in a sub shell."
        echo "      (rather than a login shell)"
        echo "\n SUB shell"
    fi
}


function large () {
    PROMPT_SIZE="LARGE"
}
function small () {
    PROMPT_SIZE="SMALL"
}
function default-prompt () {
    PROMPT_SIZE="DEFAULT"
}

function loose () {
    PROMPT_SPACE="LOOSE"
}

function tight () {
    PROMPT_SPACE="TIGHT"
}


function which-tmux-session {
    # Print the current terminal tmux session name, if any.
    # ...This function doesn't seem to work.
    for s in $(tmux list-sessions -F '#{session_name}'); do
        tmux list-panes -F '#{pane_tty} #{session_name}' -t "$s"
    done | grep "$(tty)" | awk '{print $2}'
}



function git-branch-create {
    git checkout -b $1 # $1 = <branch-name>
    printf "Ready to (automatically) set origin and upstream connections? (yes/no) "
    read readytocontinue
    printf "\n"
    if [ "${readytocontinue}" != "yes" ]; then
        # Not ready. Stop.
        printf "That wasn't a yes. Stopping here.\n"
    else
        # Ready. Continue.
        # (Not sure which below is best; middle one seems to do what I want.)
        #git branch --set-upstream-to=origin/<upstream-branch-name> <branch-name>
        #git branch --set-upstream-to=origin/$1 $1
        #git push --set-upstream origin <upstream-branch-name>
        git push --set-upstream origin $1
        #git push origin <origin-branch-name>
        #git push origin $1  # not sufficient for my uses
    fi
    printf "Don't forget to add/edit a branch description. "
    printf "Alias 'gbde branch-name'.\n"
}

function git-branch-description-show () {
    # from
    # https://gist.github.com/ejmr/a927d32e25488a282bd3
    #
    # You can use `git branch --edit-description` to write a description
    # for a branch, but Git provides no simple command to display that
    # description.  The "easiest" way to see it is via `git config --get
    # branch.BRANCH_NAME.description`.
    #
    # This script automates that process and is meant to be used as
    # a Git alias to provide a shorter command for showing the
    # description of the current branch.

    BRANCH="$(git symbolic-ref --short HEAD)"
    DESCRIPTION_PROPERTY="branch.${BRANCH}.description"
    git config --get "$DESCRIPTION_PROPERTY"
}

function git-branch-list-with-descriptions () {
    # initial version (which I've changed slightly) was from
    # https://github.com/bahmutov/git-branches/blob/master/branches.sh

    branches=`git branch --list $1`

    # requires git > v.1.7.9

    # You can set a branch's description using command
    # git branch --edit-description
    # This opens the configured text editor; enter message, save, and exit.

    # You can see branch's description using
    # git config branch.<branch name>.description

    while read -r branch ; do
        # git marks current branch with "* ", remove it
        clean_branch_name=${branch//\*\ /}
        # replace all escape sequences (including colors, etc)
        clean_branch_name=`echo $clean_branch_name | tr -d '[:cntrl:]' | sed -E "s/\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"`
        # replace symbolic-ref like `HEAD -> master`
        clean_branch_name=`echo $clean_branch_name | sed -E "s/^.+ -> //g"`

        description=`git config branch.${clean_branch_name}.description`

        firstChar=`echo "${branch}" | cut -c 1-1`

        if [[ "${firstChar}" == "*" ]] ; then
          printf "$branch   $description\n"
        else
          printf "  $branch   $description\n"
        fi
    done <<< "$branches"

    # example output
    # * master   this is master branch
    #   one   this is simple branch for testing
}

function factorial {
    local ARG="${1}"
    local re='^[0-9]+$'
    if ! [[ $ARG =~ $re ]] ; then
        printf "Error: need a positive integer\n"
        return 1
    fi
    if [[ $ARG -eq 0 ]] ; then
        echo 1
    else
        prev=$(factorial $[$ARG-1])
        printf "%s\n" $(( $ARG * prev ))
    fi
}

function vmlist {
    VBoxManage list runningvms
}

function vmstate {
    printf '%s' "State of VM \"Kubuntu\": "
    VBoxManage showvminfo --machinereadable "Kubuntu" | grep ^VMState=
}

function vm {
    local name="${1:-Kubuntu}"
    local username="${2:-zero}"
    # Check if VM is running.
    if ! VBoxManage list runningvms | cut -d '"' -f 2 | grep -q "${name}" ; then
        # VM is not running.
        # Start VM.
        VBoxManage startvm --type headless "${name}"
        printf "Waiting for SSH connection...\n\n"
    fi
    # VM is running.
    local port=$(VBoxManage showvminfo "${name}" --machinereadable |
                 grep '^Forwarding(.*,22"' | cut -d , -f 4)
    # Connect to VM.
    #ssh -p ${port} -o ConnectionAttempts=200 ${username}@localhost
    ssh -t -p ${port} -o ConnectionAttempts=200 ${username}@localhost
    # `-t` added to see if I can get color in my shell
}

function xvm {
    # (using the -Y option for insecure/trusted X11/X-Window forwarding, for instance, while using XQuartz on a Mac to view PDFs from the virtual machine)
    # (EG: use an XQuartz shell/Terminal, execute "xvm" to enter VM, and execute "okular filename.pdf")
    local name="${1:-Kubuntu}"
    local username="${2:-zero}"
    # Check if VM is running.
    if ! VBoxManage list runningvms | cut -d '"' -f 2 | grep -q "${name}" ; then
        # VM is not running.
        # Start VM.
        VBoxManage startvm --type headless "${name}"
        printf "Waiting for SSH connection...\n\n"
    fi
    # VM is running.
    local port=$(VBoxManage showvminfo "${name}" --machinereadable |
                 grep '^Forwarding(.*,22"' | cut -d , -f 4)
    # Connect to VM.
    ssh -Y -p ${port} -o ConnectionAttempts=200 ${username}@localhost
}

function vmoff {
    local name="${1:-Kubuntu}"
    local username="${2:-zero}"
    local password="$3"
    local readytocontinue="no"
    # Check if VM is running.
    if ! VBoxManage list runningvms | cut -d '"' -f 2 | grep -q "${name}" ; then
        # VM is not running.
        printf "No need: No running VM to shut down.\n"
    else
        # VM is running.
        ##############################
        # Check for open/active shell sessions (in host with "ps").
        # ps | grep "${username}@localhost"
        # Check for open/active shell sessions (in guest with "who").
        #### I don't know how to get this to work (even when writing command out literally in shell by hand).
        # from https://unix.stackexchange.com/questions/232063/what-is-most-secure-and-simplest-way-to-have-a-user-typed-password-on-bash-becom
        #  and https://askubuntu.com/questions/908134/how-to-pass-shell-arguments-with-vboxmanage-guestcontrol
        #  and https://superuser.com/questions/547980/bash-script-to-wait-for-virtualbox-vm-shutdown
        ## unset -v password # make sure it's not exported
        ## set +a               # make sure variables are not automatically exported
        ## printf "\n\nEnter VM password (to check for open shell sessions): "
        ## IFS= read -rs password < /dev/tty &&
        ##   eval $(echo VBoxManage --nologo guestcontrol "${name}" run --exe "/usr/bin/who" --username "${username}" --password "${password}" --wait-stdout)
        ##   #eval $(ls /pathy/path/"${name}")
        ##   #eval $(VBoxManage --nologo guestcontrol "${name}" run --exe "/usr/bin/who" --username "${username}" --password "${password}" --wait-stdout)
        #if ! ##expression##; then
        #    # No open shell sessions.
        #    # "Graceful" shut down.
        #    #### VBoxManage controlvm "${name}" acpipowerbutton
        #    printf "Would-be shut-down."
        #else
        #    # There are open shell sessions.
        #    # Don't shut down.
        #    printf "FAIL: Kubuntu still on: close active shell sessions first."
        #fi
        ##############################
        # Check if user knows about open/active shells sessions.
        printf "Are you sure that:\n"
        printf " 1) the "head"/GUI is not running, and\n"
        printf " 2) there are no open/active shell sessions?  (yes/no)  "
        read readytocontinue
        printf "\n"
        if [ "${readytocontinue}" != "yes" ]; then
            # Not ready. Abort.
            printf "That wasn't a yes. Aborting.\n"
            printf "Note: you can check for open/active sessions with the \"ps\" commandor the \"who\" command within the VM.\n\n"
        else
            # Ready. Shut down.
            printf "Shutting down \"gracefully\" with acpipowerbutton.\n"
            VBoxManage controlvm "${name}" acpipowerbutton
            # Return prompt after VM is off.
            printf "Waiting for virtual machine ${name} to shut down.."
            #until [ ! $(VBoxManage list runningvms | cut -d '"' -f 2 | grep -q "${name}") ]; do
            until [ $(VBoxManage showvminfo --machinereadable "${name}" | grep ^VMState=.poweroff.) ]; do
                printf "."
                sleep 1
            done
            print "\n"
        fi
    fi
}

function vmtest {
    local name="${1:-Kubuntu}"
    local username="${2:-zero}"
    local password="$3"
    unset -v password # make sure it's not exported
    set +a            # make sure variables are not automatically exported
    printf "\n\nEnter VM password (to check for open shell sessions): "
    IFS= read -rs password < /dev/tty &&
      VBoxManage --nologo guestcontrol "${name}" run --exe "/usr/bin/who" --username "${username}" --password "${password}" --wait-stdout
    printf "${password}\n"
}


function title {
    echo -ne "\033]0;$1\007"
    #echo -ne "\033]$1\007"
}

function notify {
    message="${1:-Process complete}"
    options='title "Terminal" sound name "Ping"'
    script="display notification \"$message\" with $options"
    /usr/bin/osascript -e "$script"
}


function add_conda_anaconda_to_PATH {
    # include the path to conda / anaconda
    export PATH="/Users/zero/Tools/anaconda3/bin:$PATH"
}

function remove_conda_anaconda_from_PATH {
    # remove the path to conda / anaconda
    export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/anaconda3/ {next} {print}' | sed 's/:*$//')
}

function conda-on {
    # add conda (etc) to PATH
    add_conda_anaconda_to_PATH
    printf "The PATH environment variable is now set to\n"
    printf "  %s\n" $PATH
    printf "The conda (package manager) and the Anaconda (package distribution) should be activated now.\n"

    # activate conda base environment (?)
    conda activate

    # for virtualenv and virtualenvwrapper (set-up)
    #export WORKON_HOME=$HOME/.virtualenvs   # Optional
    ##export PROJECT_HOME=$HOME/projects      # Optional
    #source $HOME/Tools/anaconda3/bin/virtualenvwrapper.sh

    # for pyenv (set-up)
    #export PATH="$HOME/.pyenv/bin:$PATH"
    #eval "$(pyenv init -)"

    # for pyenv (all the stuff I started working with)
    # see https://stackoverflow.com/questions/51551557/pyenv-build-failed-installing-python-on-macos
    ##CFLAGS="-I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include"
    ##LDFLAGS="-L$(brew --prefix openssl)/lib"
    #CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include"
    #LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib"
    #PYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2
    #export PATH="$HOME/.pyenv/bin:$PATH"
    #eval "$(pyenv init -)"
    #eval "$(pyenv virtualenv-init -)"
}

function conda-off {
    # deactivate conda environment
    conda deactivate

    # remove conda (etc) from PATH
    remove_conda_anaconda_from_PATH
    printf "The PATH environment variable is now set to\n"
    printf "    %s\n" $PATH
    printf "The conda (and Anaconda) should be de-activated now.\n"

    # for virtualenv and virtualenvwrapper (take-down?)
    # ?

    # for pyenv (take-down?)
    # ?
}

# UPDATES
# mup = mac update   (MacOS, etc)
# bup = brew update  (Homebrew package manager)
# cup = conda update (conda package manager, and anaconda distribution)
# pup = pip update   (pip package manager)

#alias mup='softwareupdate -ia'
function mup {
    printf '\n'
    printf '%s\n' "--------------------"
    printf '%s\n' "|   MacOS update   |"
    printf '%s\n' "--------------------"
    printf '\n%s\n\n' "(for MacOS and MacOS-managed apps, not including brew-, conda-, and pip-managed packages)"
    # Checking for updates...
    softwareupdate -l
    printf '%s\n' "Download and install (verbosely) all available updates? (yes/no) "
    read readytocontinue
    printf "\n"
    if [ "${readytocontinue}" != "yes" ]; then
        # Not ready. Stop.
        printf '%s\n' "That wasn't a yes. Stopping here."
    else
        # Ready. Continue.
        softwareupdate -ia --verbose
    fi
    printf '\n'
}
#alias bup="brew update && brew upgrade && brew cleanup && brew doctor"
function bup {
    function bstep0 {
        # If necessary, to keep conda/anaconda from interfering with Homebrew's setup:
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   conda 'off'    |"
        printf '%s\n' "--------------------"
        printf '\n\n%s' "Deactivating conda (~'conda_off') so as not to interfere with Homebrew's setup."
        remove_conda_anaconda_from_PATH
    }
    function bstep1 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   brew update    |"
        printf '%s\n' "--------------------"
        printf ''
        brew update
    }
    function bstep2 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   brew upgrade   |"
        printf '%s\n' "--------------------"
        printf ''
        brew upgrade
    }
    function bstep3 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   brew cleanup   |"
        printf '%s\n' "--------------------"
        printf ''
        brew cleanup
    }
    function bstep4 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   brew doctor    |"
        printf '%s\n' "--------------------"
        printf ''
        brew doctor
    }
    bstep1 && bstep2 && bstep3 && bstep4
    printf '\n'
}
#alias cu="conda update --all --yes; conda clean --all --yes --quiet"
#alias cup="conda update --prefix /Users/zero/Tools/anaconda3 anaconda && conda clean"
function cup {
    function cstep1 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   conda 'on'     |"
        printf '%s\n' "--------------------"
        printf '\n'
        conda-on
    }
    function cstep2 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   conda update   |"
        printf '%s\n' "--------------------"
        printf '\n'
        conda update --prefix /Users/zero/Tools/anaconda3 anaconda
    }
    function cstep3 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   conda clean    |"
        printf '%s\n' "--------------------"
        printf '\n'
        conda clean --all
    }
    function cstep4 {
        printf '\n'
        printf '%s\n' "--------------------"
        printf '%s\n' "|   conda 'off'    |"
        printf '%s\n' "--------------------"
        printf '\n'
        conda-off
    }
    cstep1
    cstep2 && cstep3
    cstep4
}

