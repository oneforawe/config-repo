#!/usr/bin/env bash
# filename: bashrc_prompt   (linked from ~/.config/bash/bashrc_prompt)
# purpose: Define the interactive-shell prompts (primary and peripheral).

# This file is sourced from ~/.bashrc (which is for interactive shells).


# PREP WORK
# ----------------------------

# Colors for the prompt (using ANSI escape sequences)
RED='\e[1;31m' # red   bold   (1)
grn='\e[0;32m' # green normal (0)
BLU='\e[1;34m' # blue  bold   (1)
RC='\e[0m' # Reset Color (no color)
DATE=$(date +'%Y %b %d %a %H:%M:%S') # format: '2020 Jan 01 Wed 23:59:59'

function concatLinesWithCommas {
	# The $1 outside of the string below is the first (and only) parameter to this
	# function, which is passed to the shell command awk as its only argument.
	# awk (Aho-Weinberger-Kernighan inspired text-editor)
	# Essentially, awk takes a file and returns a file (ie, list of lines).
	# NR = number of records (lines) read in iterative-reading of lines of a file.
	# $0 = current record (line); $1, $2, ... are the fields separated by spc/tab.
	# The string s is initially undefined (=> empty string) and is redefined with
	# each new line to be its previous value pre-pended/concatenated with the new
	# line, with an interceding delimiter (-v[ariable]) d on lines other than the
	# first. At the end of the file, the aggregate s is printed out.
	awk -v d=" , " '{s=(NR==1?s:s d)$0}END{print s}' $1
}

function getFieldTwo {
	# See comments in concatLinesWithCommas for explanation of awk.
	awk '{print $2}' $1
}

function cleanOutpt {
	# See comments in concatLinesWithCommas for explanation of awk.
	if [[ $1 == "addr:"* ]] ; then
		# Edit each line (in list of results), taking second field, separator ":".
		echo "$1" | awk 'BEGIN {FS = ":"} ; {print $2}';
	else
		# Print out each line (in list of results) unaltered.
		echo "$1" | awk '{print $0}';
	fi
}

function pipeClean {
	while IFS= read -r line; do
		cleanOutpt $line;
	done
}

# Set SSH indicator (if variable string not empty, then remotely logged in).
if [[ -n $SSH_CLIENT ]] ; then IN_SSH=" ${BLU}[ssh]${RC}" ; else IN_SSH='' ; fi

# Get the IP address(es) - internet broadcasting IP address(es).
#THEIP=$(ifconfig | grep broadcast | getFieldTwo | concatLinesWithCommas)
# Instead of the expression above, let's use the expression below to be
# compatible with older versions of bash
THEIP=$(ifconfig | grep cast | getFieldTwo | pipeClean | concatLinesWithCommas)
# Alternatives
#THEIP=$( ip address show | grep 'brd' | grep 'inet' | getSecondField |
#  awk '{split($0,a,"/"); print a[1]}' | concatLinesWithCommas )
#THEIP=$(curl -4 --silent icanhazip.com)
if [[ -z $THEIP ]] ; then THEIP='IP-MISSING' ; fi


# THE PROMPT VARIABLES
# ----------------------------

# See `man bash` for more info on these variables (PS0, PS1, PROMPT_COMMAND).

# Set the prompt.
if [[ $(id -u) = 0 ]] ; then
	# root/super user (red - as warning/notice)
	PS1="\n┌[${RED}\u${RC} @ \H] [$THEIP]${IN_SSH} [${DATE}]: ${grn}\w${RC} \n└> "
else
	# normal user (green)
	PS1="\n┌[${grn}\u${RC} @ \H] [$THEIP]${IN_SSH} [${DATE}]: ${grn}\w${RC} \n└> "
fi

# Just before the prompt.
# Determine the window title (a kind of peripheral prompt):
PROMPT_COMMAND='echo -ne "\e]0;${TERM_PROGRAM} - %m > ${PWD##*/}\a"'
# Bash executes PROMPT_COMMAND prior to issuing each primary prompt PS1.
#    (See .zshrc_prompt)
#    terminal_name="${TERM_PROGRAM%.*}"
#    # Getting rid of "Apple_" pre-fix from "Apple_Terminal":
#    terminal_name="${terminal_name#*_}"
#    window_title="${terminal_name} - %m : ${PWD##*/}"
#    print -Pn "\e]0;${window_title}\a"

# Change the window title of X terminals
case $TERM in
	xterm*|rxvt*|Eterm|aterm|kterm|gnome)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
		source ~/.bash_login
		;;
	screen)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
		;;
esac


# Just after the prompt.
PS0="\n"
# Bash displays/executes PS0 after it reads a command but before executing it.
