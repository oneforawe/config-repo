# .inputrc -- GNU Readline configuration
# filename: inputrc   (linked from ~/.inputrc)
# purpose: Set readline configs.


# See reference [1] on Readline from the Bash manual.

# From reference [2]:
# The GNU Readline library provides a set of functions for use by applications
# that allow users to edit command lines as they are typed in. Both Emacs and vi
# editing modes are available. The Readline library includes additional
# functions to maintain a list of previously-entered command lines, to recall
# and perhaps reedit those lines, and perform csh-like history expansion on
# previous commands.

# May want to move history material from bashrc_etc to here.
#
# For examples, see:
# https://github.com/westurner/dotfiles/blob/master/etc/.inputrc
# https://www.gnu.org/software/bash/manual/html_node/Sample-Init-File.html


# Set universal readline editing mode to vi (rather than emacs)
set editing-mode vi

# Alternatives:
# set -o vi   # for vi editing mode specifically in bash (put in bashrc_opt)
# bindkey -v  # for vi editing mode specifically in zsh  (put in zshrc_opt)
# (apparently, `bindkey -v` is needed for zsh in addition to `set editing-mode`)


# Indicators
# (I've created my own custom indicators in zshrc_prompt.)
#set show-mode-in-prompt on
#set vi-ins-mode-string "+"
#set cmd-mode-string ":"


# Custom Key Bindings
# See documentation for readline; see `bind --help`, `man bind`, `man bindkey`.
# See `man zshzle` for more info on bindkey.
# Execute `bind -p` or `bindkey -L` to see vi functions and/or bindings.
# See also, eg, https://hea-www.harvard.edu/~fine/Tech/vi.html

# vi mode has two sub-modes (according to readline documentation):
# 1. "vi-insert" and 2. "vi", "vi-command", "vi-move" (all equivalent).
# Re zshzle, there are several modes, but I'll stick with viins, vicmd.

# I don't know how to simultaneously assign key bindings to two keymaps
# (vi-insert and vi-command), so I'm forced to write each key binding twice.


set keymap vi-insert

# allow ctrl-l to shift current active prompt to top of screen
"\C-k":  clear-screen

# allow ctrl-p, ctrl-n for navigate history
"\C-p":  up-history
"\C-n":  down-history

# ctrl-r starts searching history backward
"\C-r":  history-incremental-search-backward

# allow backspace (not ctrl-?), ctrl-h, ctrl-w for backward char and word delete
"\C-?":  backward-delete-char
"\C-h":  backward-delete-char
"\C-b":  backward-kill-word
# For "\C-?" and "\C-h", this "fixes" the "problem" of not being able to delete
# old letters when inserting text (so no longer really an "insert"-only mode).

# could set for insert mode only
"\C-a":  beginning-of-line
"\C-e":  end-of-line
"\C-l":  vi-forward-char
# `vi-forward-char` is equivalent to what one might call "right-arrow"


set keymap vi-command

# allow ctrl-l to shift current active prompt to top of screen
"\C-k":  clear-screen

# allow ctrl-p, ctrl-n for navigate history
"\C-p":  up-history
"\C-n":  down-history

# ctrl-r starts searching history backward
"\C-r":  history-incremental-search-backward

# allow backspace (not ctrl-?), ctrl-h, ctrl-w for backward char and word delete
"\C-?":  backward-delete-char
"\C-h":  backward-delete-char
"\C-b":  backward-kill-word
# For "\C-?" and "\C-h", this "fixes" the "problem" of not being able to delete
# old letters when inserting text (so no longer really an "insert"-only mode).

# could set for insert mode only
"\C-a":  beginning-of-line
"\C-e":  end-of-line
"\C-l":  vi-forward-char
# `vi-forward-char` is equivalent to what one might call "right-arrow"


# This command (from above) doesn't work here, so it's replicated in bashrc_opt.
#set keymap vi-command
#"\C-e":  end-of-line

# Other key bindings that (probably) won't work:
# "\C-'" / <C-'>
# "\C-;" / <C-;>
# via reference [3].

# References:
# [1] The GNU Bash Manual: Ch 8: Command Line Editing
#     https://www.gnu.org/software/bash/manual/html_node/
#       Command-Line-Editing.html#Command-Line-Editing
# [2] The GNU Readline Library
#     https://tiswww.case.edu/php/chet/readline/rltop.html
# [3] StackExchange: Vi and Vim (Beta)
#     https://vi.stackexchange.com/questions/13832/
#       key-mapping-c-ctrl-single-quote-not-working
# [4] See also notes in `.vimrc`.