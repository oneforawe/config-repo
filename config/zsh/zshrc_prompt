#!/usr/bin/env zsh
# filename: zshrc_prompt   (linked from ~/.config/zsh/zshrc_prompt)
# purpose: Define the interactive-shell prompts (primary and peripheral).


# This file is sourced from ~/.zshrc (which is for interactive shells).

# TODO: Enable notices for all vi edit modes.
# TODO: Have large, small (both with vi-mode indicator), and default prompts.
#       (for all three shells)
# TODO: Make ssh prompt but somehow make sure that tmux prompt isn't identical.
# TODO: Define a decent root prompt and environment (color schemes).

# Acknowledgement:
# This solution for a prompt that displays the vi mode is inspired by the
# solution given by Sebastian Blask in this Unix & Linux StackExchange thread:
# https://unix.stackexchange.com/questions/547/make-my-zsh-prompt-show-mode-in-vi-mode


# Custom window/tab title (prep)
# -----------------------------------------------------------------------------
DISABLE_AUTO_TITLE="true"
function set_the_window_tab_title () {
    # Getting rid of ".app" post-fix from "iTerm.app" (via substring removal):
    terminal_name="${TERM_PROGRAM%.*}"
    # Getting rid of "Apple_" pre-fix from "Apple_Terminal" (substring removal):
    terminal_name="${terminal_name#*_}"
    window_title="${terminal_name} - %m : ${PWD##*/}"
    print -Pn "\e]0;${window_title}\a"
}


# Helper awk editor functions
# -----------------------------------------------------------------------------
function concatLinesWithCommas {
  # See comments on how this function works in the bashrc_prompt file.
  awk -v d=" , " '{s=(NR==1?s:s d)$0}END{print s}' $1
}

function getFieldTwo {
  # See comments on how this function works in the bashrc_prompt file.
  awk '{print $2}' $1
}

function cleanOutpt {
  # See comments on how this function works in the bashrc_prompt file.
  if [[ $1 == "addr:"* ]] ; then
    echo "$1" | awk 'BEGIN {FS = ":"} ; {print $2}';
  else
    echo "$1" | awk '{print $0}';
  fi
}

function pipeClean {
  while IFS= read -r line; do
    cleanOutpt $line;
  done
}

# Custom shell prompt (prep)
# -----------------------------------------------------------------------------

# Applying colors, see `man zshmisc` for "Visual effects" (%F %f, %K %k, etc),
# for "EXPANSION OF PROMPT SEQUENCES" for `print -P`; also see `man zshbuiltins`
# To see all colors, execute:
# for n in {000..255}; do print -P "$n: %F{$n}%B(TESTING TEXT COLORS)%b%f"; done

# colors:
ROOT_USER_COLOR="196" # bright red
if   [[ " `uname -n` " = *soliton* ]] ; then
    TIMESTAMP_COLOR="081" # muted light blue
    USER_HOST_COLOR="105" # muted light purple
elif [[ " `uname -n` " = *maclap* ]] ; then
    TIMESTAMP_COLOR="081" # muted light blue
    USER_HOST_COLOR="105" # muted light purple
elif [[ " `uname -n` " = *momentus* ]] ; then
    TIMESTAMP_COLOR="230" # light cream
    USER_HOST_COLOR="208" # muted orange
else
    TIMESTAMP_COLOR="081" # muted light blue
    USER_HOST_COLOR="226" # light yellow
fi
STATUS_COLOR="002" # bright green
PWD_COLOR="034"    # muted green
NORMAL_MODE_FG_COLOR="250" # muted white
NORMAL_MODE_BG_COLOR="088" # deep red
INSERT_MODE_FG_COLOR="252" # muted white
INSERT_MODE_BG_COLOR="022" # dark green
# vi-mode indicators:
NORMAL_LETTER="N"
INSERT_LETTER="I"
NORMAL_MODE="%F{$NORMAL_MODE_FG_COLOR}%K{$NORMAL_MODE_BG_COLOR}%B$NORMAL_LETTER%b%k%f"
INSERT_MODE="%F{$INSERT_MODE_FG_COLOR}%K{$INSERT_MODE_BG_COLOR}$INSERT_LETTER%k%f"
# initialize:
VI_MODE=$INSERT_MODE

# alternative IP_ADDR function (comment out later definition if using this)
#IP_ADDR=$(curl -4 --silent icanhazip.com)
#if [[ -z $IP_ADDR ]] ; then IP_ADDR="IP_MISSING" ; fi

# prompt display functions:
function newline ()           { print -P "%{\n%}" }
function show_timestamp ()    { print -P "%F{$TIMESTAMP_COLOR}[$TIMESTAMP]%f" }
function show_user_host_ip () {
    if [[ $(id -u) = 0 ]] ; then
        # root/super user (red - as warning/notice)
        print -P "%F{$ROOT_USER_COLOR}%B$USER%b%f %F{$USER_HOST_COLOR}@ $(uname -n) [$IP_ADDR]%f"
    else
        # normal user (default color)
        print -P "%F{$USER_HOST_COLOR}$USER @ $(uname -n) [$IP_ADDR]%f"
    fi
}
function show_status ()       { print -P "%F{$STATUS_COLOR}\($STATUS\)%f" }
function show_path ()         { print -P "%F{$PWD_COLOR}${PWD}%f" }
function show_env () {
    # Using `-n $(echo $CONDA_DEFAULT_ENV)` instead of `-v CONDA_DEFAULT_ENV`
    # to be compatible with older versions of bash / zsh.
    if [[ -n $(echo $CONDA_DEFAULT_ENV) ]] ; then
        print -P "conda env:\(${CONDA_DEFAULT_ENV}\) "
    fi
    if [[ -n $(echo $VIRTUAL_ENV) ]] ; then
        # Get substring before last dash:
        TEMP_ENV_STRING=$(echo ${VIRTUAL_ENV%-*})
        # Get substring after last slash:
        ABBREVIATED_PYTHON_ENV=$(echo ${TEMP_ENV_STRING##*/})
        print -P "pyenv:\(${ABBREVIATED_PYTHON_ENV}\) "
        # Example:
        # Turn '/home/username/.local/share/virtualenvs/trigger-server-CADR64LI'
        # (IE environment name 'project-name-HA$H')
        # Into 'project-name'
        # (IE abbreviated env name 'project-name')
    fi
}
function show_host_letter () {
    host_name="$(uname -n)"
    host_name_letter="$(echo $host_name | head -c 1)"
    host_name_letter_cap=$( echo "$host_name_letter" | awk '{ print toupper($0) }' )
    echo "%F{$USER_HOST_COLOR}%B$host_name_letter_cap%b%f " # now using "echo" here
    # b/c using "print -P" causes tab-completion trouble (re-printing of commands)
}

function show_prompt_pre_line_1 () { print -P "" }
function show_prompt_line_1 ()     { print -P "  \u250C $(show_timestamp) $(show_user_host_ip) $(show_status)" }
function show_prompt_line_2 ()     { print -P "  \u2502 $(show_path)" }
function show_prompt_line_final () { echo "$VI_MODE \u2514 " } # now using "echo" here
# b/c using "print -P" causes tab-completion trouble (re-printing of commands)
function show_prompt_line_opt ()   {
    if [[ -n $(echo $CONDA_DEFAULT_ENV) ]] || [[ -n $(echo $VIRTUAL_ENV) ]] || [[ -n $(git_prompt_info) ]] ; then
        print -P "  \u2502 $(show_env)$(git_prompt_info)"
    fi
}
function prompt_symbol () {
    print -P ">"
}

# Original default: "DEFAULT" short prompt (from robbyrussell theme)
PROMPT_DEFAULT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'
PROMPT_SMALL='${ret_status} $VI_MODE $(show_host_letter)%F{034}%B%c%b%f $(show_env)$(git_prompt_info)$(prompt_symbol) '

# New default: set initial prompt style
if [[ " `uname -n` " = *soliton* ]] || [[ " `uname -n` " = *maclap* ]] || [[ " `uname -n` " = *momentus* ]] ;
then
    #PROMPT_SIZE="DEFAULT"
    PROMPT_SIZE="SMALL"
    #PROMPT_SIZE="LARGE"
    PROMPT_SPACE="LOOSE"
    #PROMPT_SPACE="TIGHT"
else
    PROMPT_SIZE="LARGE"
    PROMPT_SPACE="LOOSE"
fi


# Custom shell prompt (print)
# -----------------------------------------------------------------------------

# precmd: executed before the (primary) prompt (but not when prompt is redrawn).
function precmd () {
    # refresh prompt variables:
    STATUS=$status  # exit code / exit status of previously executed command
    if [[ $STATUS = 0 ]] ;
    then STATUS_COLOR="green" ;
    else STATUS_COLOR="red" ;
    fi
    #STATUS_COLOR="%(?."green"."red")"
    TIMESTAMP=$(date +'%Y %b %d %a %H:%M:%S') #format '2020 Jan 01 Wed 23:59:59'
    #IP_ADDR=$(ifconfig | grep broadcast | getFieldTwo | concatLinesWithCommas)
    # Instead of the expression above, let's use the expression below to be
    # compatible with older versions of bash
    IP_ADDR=$(ifconfig | grep cast | getFieldTwo | pipeClean | concatLinesWithCommas)
    if [[ -z $IP_ADDR ]] ; then IP_ADDR="IP_MISSING" ; fi
    # print title:
    set_the_window_tab_title
    # print first part of prompt / peripheral pre-prompt:
    if [[ $PROMPT_SPACE = "LOOSE" ]] && [[ $PROMPT_SIZE != "DEFAULT" ]] ; then
        show_prompt_pre_line_1
    fi
    if [[ $PROMPT_SIZE = "LARGE" ]] ; then
        show_prompt_line_1
        show_prompt_line_2
        show_prompt_line_opt
    fi
}

function prepare-primary-prompt () {
    case $KEYMAP in
      (vicmd)      VI_MODE=$NORMAL_MODE ;;
      (main|viins) VI_MODE=$INSERT_MODE ;;
      (*)          VI_MODE=$INSERT_MODE ;;
    esac
    # print last (main) part of prompt / primary prompt:
    if [[ $PROMPT_SIZE = "LARGE" ]] ; then
        PROMPT=$'$(show_prompt_line_final)'
    elif [[ $PROMPT_SIZE = "SMALL" ]] ; then
        PROMPT=$PROMPT_SMALL
    elif [[ $PROMPT_SIZE = "DEFAULT" ]] ; then
        PROMPT=$PROMPT_DEFAULT
    fi
}

# draw / redraw (primary) prompt:
function zle-line-init zle-keymap-select {
    prepare-primary-prompt
    zle reset-prompt # reset/re-print primary prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
# The above syntax is valid in zsh: multiple (ie, two) function names provided
# in a single declaration/assignment statement, so that the same function gets
# two names.  (I think these are pre-existing functions, so I'm not sure why the
# function keyword is there unless it's for type-unambiguity.  I would instead
# expect a syntax more like this:
#   zle-line-init, zle-keymap-select = function { statements; }
#   with an anonymous function.
# Could investigate more here and elsewhere:
#   http://zsh.sourceforge.net/Doc/Release/Functions.html


# Just after the prompt.
# print the "post" part of the prompt / "peripheral post-prompt"
function preexec() {
    if [[ $PROMPT_SPACE = "LOOSE" ]] && [[ $PROMPT_SIZE != "DEFAULT" ]] ; then
        print ""  # newline
    fi
}
# zsh executes preexec after it reads a command but before executing it.



# NOTES

# The zsh prompt default from .oh-my-zsh/themes/robbyrussell.zsh
# found with `grep -r 'PROMPT=' .oh-my-zsh | grep robby`
# PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'

# See `man zshparam` for various prompt parameters, such as
# PROMPT, PROMPT2, PROMPT3, PROMPT4 (PS1, PS2, PS3, PS4)
# RPROMPT, RPROMPT2, SPROMPT, PROMPT_EOL_MARK, etc

# My AWS definition (good for ssh connections, but want to distinguish between
#                    tmux local and ssh)
#PROMPT='${ret_status}%{$reset_color%} %{$fg[yellow]%}%B[AWS - %n@%M]%b%{$reset_color%} %{$fg[cyan]%}%B%c%b%{$reset_color%} $(git_prompt_info)'

# Potentially work in concert with bash scripts:
# precmd() { eval "$PROMPT_COMMAND" }